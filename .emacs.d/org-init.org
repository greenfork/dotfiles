#+title: My emacs configuration
#+author: greenfork
#+STARTUP: content

* Managing configuration
** Reload configuration
   #+begin_src emacs-lisp
     (defun gf/reload-config ()
       (interactive)
       (load-file "~/.emacs.d/init.el")
       (message "Configuration file reloaded"))

     (global-set-key (kbd "<f5>") #'gf/reload-config)
   #+end_src
** Open configuration
   #+begin_src emacs-lisp
     (defun gf/open-org-init-file ()
       (interactive)
       (find-file "~/.emacs.d/org-init.org"))

     (global-set-key (kbd "<f6>") #'gf/open-org-init-file)
   #+end_src

* Tweaking defaults
** $PATH
   #+begin_src emacs-lisp
     (setenv "PATH" (concat "/home/grfork/.rbenv/shims:" (getenv "PATH")))
   #+end_src
** Simple commands
   Just like defaults but better.
   
   #+begin_src emacs-lisp
     ;;;###autoload
     (defun gf/kill-region-or-line ()
       "Kill region if region is active or kill the whole line otherwise."
       (interactive)
       (if (region-active-p)
           (kill-region (region-beginning) (region-end))
         (kill-whole-line)))

     ;;;###autoload
     (defun gf/copy-region-or-line ()
       "Copy region if region is active or copy the whole line otherwise."
       (interactive)
       (if (region-active-p)
           (kill-ring-save (region-beginning) (region-end))
         (kill-ring-save (line-beginning-position) (1+ (line-end-position)))))

     ;;;###autoload
     (defun gf/move-first-char-or-beginning-of-line ()
       "Move to the first non-blank character of the line or to the beginning of
     the line."
       (interactive)
       (let ((beginning-of-line (bolp))
             (current-point (point)))
         (move-beginning-of-line 1)
         (unless (looking-at-p "[[:graph:]]")
           (re-search-forward "[[:blank:]]+" (point-at-eol) t)
           (when (and (not beginning-of-line) (= (point) current-point))
             (move-beginning-of-line 1)))))
   #+end_src
** Keybindings
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x k") #'kill-current-buffer) ; initially `kill-buffer'
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     (global-set-key (kbd "C-x v d") #'vc-dir-root) ; initially `vc-dir'
     (global-set-key [remap undo] #'undo-only)      ; "C-/", "C-x u", "C-_"
     (global-set-key (kbd "C-?") #'undo-redo)       ; accompanied to "C-/" for undo
     (global-set-key (kbd "M-=") #'count-words)     ; initially `count-words-region'
     (global-set-key (kbd "C-w") #'gf/kill-region-or-line) ; initially just `kill-region'
     (global-set-key (kbd "M-w") #'gf/copy-region-or-line) ; initially just `kill-ring-save'
     (global-set-key (kbd "<f8>") #'global-display-line-numbers-mode)
     ;; initially just `move-beginning-of-line'
     (global-set-key (kbd "C-a") #'gf/move-first-char-or-beginning-of-line)
     (global-set-key (kbd "C-^") (lambda () (interactive) (delete-indentation t)))
     (global-set-key (kbd "C-.") #'imenu)

     ;;; Originally these keys are used for `digit-argument' but this function
     ;;; is already available with "C-" commands.
     (global-set-key (kbd "M-1") #'delete-other-windows)
     (global-set-key (kbd "M-2") #'split-window-below)
     (global-set-key (kbd "M-3") #'split-window-right)
     (global-set-key (kbd "M-0") #'delete-window)
     (global-set-key (kbd "M-4") (lookup-key global-map (kbd "C-x 4")))
     (global-set-key (kbd "M-5") (lookup-key global-map (kbd "C-x 4")))

     ;;; Don't suspend in graphical mode
     (unless (display-graphic-p)
       (global-set-key (kbd "C-z") nil)
       (global-set-key (kbd "C-x z") nil))

     ;;; Additional fast keybindings with "super" modifier
     (global-set-key (kbd "H-s-e") #'eval-last-sexp)
     (global-set-key (kbd "H-s-o") #'other-window)
     (global-set-key (kbd "H-s-b") (lambda () (interactive) (switch-to-buffer nil)))
     (global-set-key (kbd "H-s-s") #'save-buffer)
     (global-set-key (kbd "H-s-k") #'kill-current-buffer)
   #+end_src
** General settings
   #+begin_src emacs-lisp
     ;;; Default line length to 80
     (setq-default fill-column 80)

     ;;; y-or-n instead of yes-or-no
     (setq use-short-answers t)

     ;;; Scrolling behaviour
     (setq-default scroll-preserve-screen-position t)
     (setq-default scroll-conservatively 101) ; affects `scroll-step'
     (setq-default scroll-margin 0)
     (setq-default next-screen-context-lines 0)
     (add-hook 'prog-mode-hook (lambda () (setq-local scroll-margin 3)))

     ;;; Mouse active in terminal
     (unless (display-graphic-p)
       (xterm-mouse-mode 1)
       (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
       (global-set-key (kbd "<mouse-5>") 'scroll-up-line))

     ;;; Encoding to UTF-8
     (prefer-coding-system 'utf-8)
     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-language-environment   'utf-8)

     ;;; Or would we rather highlight the end of buffer somehow when there's none?
     ;;; Or maybe this should only be set for programming modes?
     (setq require-final-newline t)

     ;;; All the files and cached data
     (setq emacs-share-directory "~/.local/share/emacs")
     (make-directory emacs-share-directory t)
     (setq create-lockfiles nil)
     (setq backup-directory-alist `((".*" . ,(concat emacs-share-directory "/backup"))))
     (setq version-control t)
     (setq delete-old-versions t)
     (setq kept-new-versions 20)
     (setq kept-old-versions 10)
     (setq auto-save-list-file-prefix (concat emacs-share-directory "/auto-save-list"))
     (setq auto-save-file-name-transforms `((".*" ,(concat emacs-share-directory "/auto-save-list") t)))
     (setq auto-save-timeout 300)
     (setq auto-save-no-message "")
     (setq bookmark-default-file (concat emacs-share-directory "/bookmarks"))
     (setq tramp-backup-directory-alist backup-directory-alist)
     (setq tramp-persistency-file-name (concat emacs-share-directory "/tramp"))
     (setq recentf-save-file (concat emacs-share-directory "/recentf"))
     (setq recentf-max-menu-items 100)
     (setq recentf-mex-saved-items 100)
     (setq savehist-file (concat emacs-share-directory "/savehist"))
     (setq history-length 300)
     (setq history-delete-duplicates t)
     (setq savehist-save-minibuffer-history t)
     (setq save-place-file (concat emacs-share-directory "/saveplace"))
     (setq eshell-directory-name (expand-file-name "eshell" emacs-share-directory))
     (setq eshell-history-size 500)
     (setq eshell-last-dir-ring-size 200)
     (setq project-list-file (concat emacs-share-directory "/projects"))

     ;;; *scratch* buffer
     (setq initial-scratch-message nil)
     (setq initial-major-mode 'emacs-lisp-mode)

     ;;; Faster response in minibuffer on key presses
     (setq echo-keystrokes 0.5)

     ;;; Also show column in the mode line
     (setq column-number-mode t)

     ;;; Cursor settings
     (setq blink-cursor-blinks 6)            ; 10 by default
     (setq x-stretch-cursor t)               ; display stretched cursor on tabs

     ;;; Typography
     (setq underline-minimum-offset 1)
     (setq overline-margin 2)

     (setq display-raw-bytes-as-hex t)       ; octal by default

     ;;; Tabs vs spaces
     (setq-default indent-tabs-mode nil)

     ;;; Searching
     (setq isearch-lazy-count t)

     ;;; Typed text replaces selection
     (delete-selection-mode 1)

     ;;; Performance for long lines
     (global-so-long-mode 1)

     ;;; Always use only encrypted storage for passwords
     (setq auth-sources '("~/.authinfo.gpg"))

     ;;; Org opens links on pressing RET
     (setq org-return-follows-link t)

     ;;; Save minibuffer history.
     (add-hook 'after-init-hook #'savehist-mode)

     ;; Prefer ripgrep, then ugrep, and fail back to regular grep.
     (setq xref-search-program
           (cond
            ((or (executable-find "ripgrep")
                 (executable-find "rg"))
             'ripgrep)
            ((executable-find "ugrep")
             'ugrep)
            (t
             'grep)))
   #+end_src

* Package management
** Installing
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

   #+end_src
* Appearance
** Font
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :font "JetBrains Mono" :height 110)

     (straight-use-package
      '(ligature :type git :host github :repo "mickeynp/ligature.el"))

     ;; https://emacs.stackexchange.com/q/55059
     (defconst ligatures--jetbrains-mono
       '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
         "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
         "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
         "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
         "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
         "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
         "<:" ":<" ":>" ">:" "<>" "***" ";;" ";;;" "/==" ".=" ".-" "__"
         "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
         ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
         "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
         "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
         "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
         "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
         "&="))

     (ligature-set-ligatures 'prog-mode ligatures--jetbrains-mono)
     (global-ligature-mode)

     ;;; Emojis and unicode
     (set-fontset-font
      t
      '(#x1f300 . #x1fad0)
      (cond
       ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
       ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
       ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
       ((member "Symbola" (font-family-list)) "Symbola")
       ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")))
   #+end_src
** Theme
*** Vivendi and Operandi
   #+begin_src emacs-lisp
     (load-theme 'modus-operandi t t)
     (load-theme 'modus-vivendi t t)

     (defun light-theme ()
       (interactive)
       (mapc #'disable-theme custom-enabled-themes)
       (enable-theme 'modus-operandi))

     (defun dark-theme ()
       (interactive)
       (mapc #'disable-theme custom-enabled-themes)
       (enable-theme 'modus-vivendi))

     ;; Use the dark theme after 5pm and before 7am.
     ;; (if (< 6 (string-to-number (format-time-string "%H")) 16)
     ;;     (light-theme)
     ;;   (dark-theme))
   #+end_src
*** ef-themes
#+begin_src emacs-lisp
  (straight-use-package
   '(ef-themes :type git :host github :repo "emacs-straight/ef-themes" :files ("*" (:exclude ".git"))))

  (require 'ef-themes)

  ;; If you like two specific themes and want to switch between them, you
  ;; can specify them in `ef-themes-to-toggle' and then invoke the command
  ;; `ef-themes-toggle'.  All the themes are included in the variable
  ;; `ef-themes-collection'.
  (setq ef-themes-to-toggle '(ef-spring ef-autumn))

  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).

  (setq ef-themes-headings ; read the manual's entry or the doc string
        '((0 . (variable-pitch light 1.9))
          (1 . (variable-pitch light 1.8))
          (2 . (variable-pitch regular 1.7))
          (3 . (variable-pitch regular 1.6))
          (4 . (variable-pitch regular 1.5))
          (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
          (6 . (variable-pitch 1.3))
          (7 . (variable-pitch 1.2))
          (t . (variable-pitch 1.1))))

  ;; They are nil by default...
  (setq ef-themes-mixed-fonts t
        ef-themes-variable-pitch-ui t)

  ;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes)

  ;; Use light and dark themes based on time of the day. `car' is light theme,
  ;; `cadr' is dark.
  (if (< 6 (string-to-number (format-time-string "%H")) 16)
      (load-theme (car ef-themes-to-toggle) :no-confirm)
    (load-theme (cadr ef-themes-to-toggle) :no-confirm))
#+end_src
** Rainbow parens
   #+begin_src emacs-lisp
     (straight-use-package
      '(rainbow-delimiters :type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters"))
   #+end_src
* Help, discovery and convenience
** Show possible key combinations
   #+begin_src emacs-lisp
     (straight-use-package
      '(which-key :type git :flavor melpa :host github :repo "justbur/emacs-which-key"))

     (which-key-mode)
   #+end_src
** Hide unnecessary modes from the mode line
   #+begin_src emacs-lisp
     (straight-use-package
      '(delight :type git :host github :repo "emacs-straight/delight" :files ("*" (:exclude ".git"))))

     (delight 'which-key-mode nil 'which-key)
     (delight 'flyspell-mode nil 'flyspell)
     (delight 'eldoc-mode nil 'eldoc)
   #+end_src
* Windows
** Winner mode
   #+begin_src emacs-lisp
     (winner-mode)
   #+end_src
* Completion
   #+begin_src emacs-lisp
     ;;; Vertical minibuffer
     (straight-use-package
      '(vertico :type git :host github :repo "emacs-straight/vertico" :files ("*" (:exclude ".git"))))

     (vertico-mode)
     (setq vertico-count 12)


     ;;; Completion style
     (straight-use-package
      '(orderless :type git :flavor melpa :host github :repo "oantolin/orderless"))

     (setq completion-styles '(orderless)
           completion-category-defaults nil
           completion-category-overrides '((file (styles partial-completion))))

     (defun literal-if-twiddle (pattern _index _total)
       "Match word~ PATTERN style."
       (when (string-suffix-p "~" pattern)
         `(orderless-literal . ,(substring pattern 0 -1))))

     (defun first-flex (pattern index _total)
       "Match word PATTERN for first INDEX."
       (if (= index 0) 'orderless-regexp))

     (defun without-if-bang (pattern _index _total)
       "Match !word PATTERN style."
       (cond
        ((equal "!" pattern)
         '(orderless-literal . ""))
        ((string-prefix-p "!" pattern)
         `(orderless-without-literal . ,(substring pattern 1)))))

     (setq orderless-matching-styles '(orderless-regexp)
           orderless-style-dispatchers '(literal-if-twiddle
                                         without-if-bang
                                         first-flex))


     ;;; Annotating
     (straight-use-package
      '(marginalia :type git :flavor melpa :host github :repo "minad/marginalia"))

     (marginalia-mode)

     (define-key minibuffer-local-map (kbd "M-a") #'marginalia-cycle)
   #+end_src
* Version control
** Auto-revert
   #+begin_src emacs-lisp
     (setq auto-revert-check-vc-info t)
     (setq global-auto-revert-non-file-buffers t)
     (global-auto-revert-mode 1)
   #+end_src
** VC
   #+begin_src emacs-lisp
     ;;; Do not ask when following a symlink
     (setq vc-follow-symlinks t)

     ;;; Kill the diff buffers
     (setq vc-revert-show-diff 'kill)

     ;;; Show commands run by vc binaries
     (setq vc-command-messages t)

     ;;; Faster alternative using C and a running daemon
     (setq vc-hg-program "chg")
   #+end_src
* Shells
** Eshell
   #+begin_src emacs-lisp
     ;;; Some commands such as psql or git log will use a pager when the output
     ;;; is larger than the screen, which breaks `eshell'.
     (setenv "PAGER" "cat")
   #+end_src
* ORG ARG
** General

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (auto-fill-mode 1)))
#+end_src

** Babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages '((ruby . t)
                               (shell . t)))
#+end_src
** Export

#+begin_src emacs-lisp
  (straight-use-package
   '(ox-gfm :type git :flavor melpa :host github :repo "larstvei/ox-gfm"))

  (eval-after-load "org"
    '(require 'ox-gfm nil t))
#+end_src

* Texting and communication with society
** General texting
   #+begin_src emacs-lisp
     (add-hook
      'text-mode-hook
      (lambda ()
        (flyspell-mode)
        (visual-line-mode)
        ))
   #+end_src
** IRC
   #+begin_src emacs-lisp
     (straight-use-package
      '(erc-nick-notify :type git :host github :repo "emacsmirror/erc-nick-notify"))

     (require 'erc)
     (require 'erc-log)
     (require 'erc-notify)
     (require 'erc-spelling)
     (require 'erc-autoaway)
     (require 'erc-services)
     (require 'erc-nick-notify)

     (setq
      erc-nick '("greenfork" "greenfork_")
      erc-user-full-name "Dmitry Matveyev")

     (setq erc-prompt-for-nickserv-password nil)
     (add-to-list 'erc-nickserv-alist
                  '(Libera.Chat
                    "NickServ!NickServ@services.libera.chat"
                    ;; libera.chat also accepts a password at login, see the `erc'
                    ;; :password argument.
                    "This\\s-nickname\\s-is\\s-registered.\\s-Please\\s-choose"
                    "NickServ"
                    "IDENTIFY" nil nil
                    ;; See also the 901 response code message.
                    "You\\s-are\\s-now\\s-identified\\s-for\\s-"))
     (erc-services-mode 1)

     ;; Interpret mIRC-style color commands in IRC chats
     (setq erc-interpret-mirc-color t)

     ;; The following are commented out by default, but users of other
     ;; non-Emacs IRC clients might find them useful.
     ;; Kill buffers for channels after /part
     (setq erc-kill-buffer-on-part t)
     ;; Kill buffers for private queries after quitting the server
     (setq erc-kill-queries-on-quit t)
     ;; Kill buffers for server messages after quitting the server
     (setq erc-kill-server-buffer-on-quit t)

     ;; open query buffers in the current window
     (setq erc-query-display 'buffer)

     ;; exclude boring stuff from tracking
     (setq erc-track-position-in-mode-line t)
     (erc-track-mode t)
     (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                     "324" "329" "332" "333" "353" "477"))

     ;; logging
     (setq erc-log-channels-directory "~/.erc/logs/")

     (if (not (file-exists-p erc-log-channels-directory))
         (mkdir erc-log-channels-directory t))

     (setq erc-save-buffer-on-part t)
     ;; FIXME - this advice is wrong and is causing problems on Emacs exit
     ;; (defadvice save-buffers-kill-emacs (before save-logs (arg) activate)
     ;;   (save-some-buffers t (lambda () (when (eq major-mode 'erc-mode) t))))

     ;; truncate long irc buffers
     (erc-truncate-mode +1)

     ;; enable spell checking
     (erc-spelling-mode 1)
     ;; set different dictionaries by different servers/channels
     ;;(setq erc-spelling-dictionaries '(("#emacs" "american")))

     (defvar erc-notify-nick-alist nil
       "Alist of nicks and the last time they tried to trigger a
          notification")

     (defvar erc-notify-timeout 10
       "Number of seconds that must elapse between notifications from
          the same person.")

     (defun erc-notify-allowed-p (nick &optional delay)
       "Return non-nil if a notification should be made for NICK.
          If DELAY is specified, it will be the minimum time in seconds
          that can occur between two notifications.  The default is
          `erc-notify-timeout'."
       (unless delay (setq delay erc-notify-timeout))
       (let ((cur-time (time-to-seconds (current-time)))
             (cur-assoc (assoc nick erc-notify-nick-alist))
             (last-time nil))
         (if cur-assoc
             (progn
               (setq last-time (cdr cur-assoc))
               (setcdr cur-assoc cur-time)
               (> (abs (- cur-time last-time)) delay))
           (push (cons nick cur-time) erc-notify-nick-alist)
           t)))

     ;; autoaway setup
     (setq erc-auto-discard-away t)
     (setq erc-autoaway-idle-seconds 600)
     (setq erc-autoaway-use-emacs-idle t)

     ;; utf-8 always and forever
     (setq erc-server-coding-system '(utf-8 . utf-8))

     (setq erc-pcomplete-nick-postfix ",")


     (defvar my-fav-irc '("irc.libera.chat")
       "Stores the list of IRC servers that you want to connect to with start-irc.")

     (defvar bye-irc-message "Bye"
       "Message string to be sent while quitting IRC.")

     (defun connect-to-erc (server)
       "Connects securely to IRC SERVER over TLS at port 6697."
       (erc-tls :server server
                :port 6697))

     (defun start-irc ()
       "Connect to IRC?"
       (interactive)
       (mapcar 'connect-to-erc my-fav-irc))

     (defun filter-server-buffers ()
       (delq nil
             (mapcar
              (lambda (x) (and (erc-server-buffer-p x) x))
              (buffer-list))))

     (defun stop-irc ()
       "Disconnects from all irc servers."
       (interactive)
       (dolist (buffer (filter-server-buffers))
         (message "Server buffer: %s" (buffer-name buffer))
         (with-current-buffer buffer
           (erc-quit-server bye-irc-message))))

   #+end_src
** Mail
*** General mailing
    #+begin_src emacs-lisp
      ;;; Personal settings
      (setq user-mail-address "public@greenfork.me")
      (setq user-full-name "Dmitry Matveyev")

      ;;; Sending mail
      (setq message-send-mail-function 'smtpmail-send-it)
      (setq smtpmail-default-smtp-server "smtp.fastmail.com")
      (setq smtpmail-smtp-server "smtp.fastmail.com")
      (setq smtpmail-smtp-service 465)
      (setq smtpmail-stream-type 'ssl)
      (add-hook 'message-send-hook
                (lambda ()
                  (unless (yes-or-no-p "Send message?")
                    (signal 'quit nil))))

      ;;; Queuing mail
      (setq smtpmail-queue-mail nil)
      (setq smtpmail-queue-dir "~/mail/queue/cur")

      ;;; Allow to read my own emails by encrypting them with my key too.
      (setq mml-secure-openpgp-encrypt-to-self t)
      (setq mml-secure-openpgp-sign-with-sender t)
      (setq mml-secure-smime-encrypt-to-self t)
      (setq mml-secure-smime-sign-with-sender t)

      ;;; Don't ask how to encrypt/sign messages
      (setq mm-encrypt-option nil)
      (setq mm-sign-option nil)

      (setq message-elide-ellipsis "[... %l lines elided]\n")
    #+end_src
*** Mu4e
    #+begin_src emacs-lisp
      (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
      (require 'mu4e)
      (setq mail-user-agent 'mu4e-user-agent)
      (set-variable 'read-mail-command 'mu4e)

      ;;; Folders
      (setq mu4e-maildir-shortcuts
       '(("/fastmail/INBOX" . ?i)
         ("/fastmail/Drafts" . ?D)
         ("/fastmail/Sent" . ?S)
         ("/fastmail/Trash" . ?T)
         ("/fastmail/Archive" . ?A)))
      (setq mu4e-sent-folder "/fastmail/Sent")
      (setq mu4e-drafts-folder "/fastmail/Drafts")
      (setq mu4e-trash-folder "/fastmail/Trash")
      (setq mu4e-refile-folder "/fastmail/Archive")

      ;;; Syncing
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-change-filenames-when-moving t)

      ;;; Header view
      (setq mu4e-headers-date-format "%d.%m.%Y")
      (setq mu4e-headers-time-format "%R")
      (setq mu4e-headers-fields
            '((:human-date . 12)
              (:flags . 6)
              (:mailing-list . 10)
              (:from-or-to . 22)
              (:thread-subject)))

      ;;; Message view
      ;; Prefer text format
      (with-eval-after-load "mm-decode"
        (add-to-list 'mm-discouraged-alternatives "text/html")
        (add-to-list 'mm-discouraged-alternatives "text/richtext"))

      ;;; Use Unicode characters
      (setq mu4e-use-fancy-chars t)

      ;;; Only scroll within one message
      (setq mu4e-view-scroll-to-next nil)

      (setq mu4e-compose-dont-reply-to-self t)
      (setq mu4e-compose-signature-auto-include nil)
      (setq mu4e-compose-reply-to-address "public@greenfork.me")
      (setq mu4e-attachment-dir "~/Downloads/attachments")

      (add-hook 'message-send-hook
                (lambda ()
                  (unless (yes-or-no-p "Send message?")
                    (signal 'quit nil))))
    #+end_src
** Matrix
   #+begin_src emacs-lisp
     (straight-use-package
      '(plz :type git :host github :repo "alphapapa/plz.el"))

     (straight-use-package
      '(ement :type git :host github :repo "alphapapa/ement.el"))
   #+end_src
** Gemini
   #+begin_src emacs-lisp
     (straight-use-package
      '(elpher :type git :flavor melpa :repo "https://thelambdalab.xyz/git/elpher.git"))

     (add-hook 'elpher-mode-hook (lambda () (text-scale-set 1)))
   #+end_src
** Markdown
   #+begin_src emacs-lisp
     (straight-use-package
      '(markdown-mode :type git :flavor melpa :host github :repo "jrblevin/markdown-mode"))

     (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
     (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
     (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

     (add-to-list 'auto-mode-alist '("\\.dj\\'" . markdown-mode))

     (add-hook 'markdown-mode-hook
               (lambda ()
                 (auto-fill-mode 1)))
   #+end_src
** Presentation
*** Center the screen
    #+begin_src emacs-lisp
      (straight-use-package
       '(olivetti :type git :flavor melpa :host github :repo "rnkn/olivetti"))
    #+end_src
** Feeds
#+begin_src emacs-lisp
  (straight-use-package
   '(elfeed :type git :flavor melpa :files (:defaults "README.md" "elfeed-pkg.el") :host github :repo "skeeto/elfeed"))

  (setq elfeed-feeds
        '("https://www.more-magic.net/feed.atom"
          "https://dataswamp.org/~solene/rss.xml"))
#+end_src
* Programming
** Defaults
   #+begin_src emacs-lisp
     (add-hook
      'prog-mode-hook
      (lambda ()
        (setq-local show-trailing-whitespace t)
        (setq-local indicate-empty-lines t)
        (flyspell-prog-mode)
        (show-paren-local-mode)
        (electric-pair-local-mode)
        ))
   #+end_src
** General editing
** nREPL
   #+begin_src emacs-lisp
     (straight-use-package
      '(monroe :type git :flavor melpa :host github :repo "sanel/monroe"))
   #+end_src
** Syntax checking
   #+begin_src emacs-lisp
     (straight-use-package
      '(flycheck :type git :flavor melpa :host github :repo "flycheck/flycheck"))

     ;;; Enable flycheck mode everywhere
     (add-hook 'after-init-hook #'global-flycheck-mode)

     ;;; Rubocop used for Ruby checking is quite slow, be more conservative
     (add-hook 'ruby-mode-hook
               (lambda ()
                 (setq-local flycheck-check-syntax-automatically '(save))))
   #+end_src
** Emacs Lisp
   #+begin_src emacs-lisp
     (add-hook
      'emacs-lisp-mode-hook
      (lambda ()
        (display-fill-column-indicator-mode 1)
        (rainbow-delimiters-mode)))
   #+end_src
** Ruby
   #+begin_src emacs-lisp
     (add-hook
      'ruby-mode-hook
      (lambda ()
        (display-fill-column-indicator-mode 1)))

     (straight-use-package
      '(rubocop :type git :flavor melpa :host github :repo "rubocop/rubocop-emacs"))
   #+end_src
** JavaScript
   #+begin_src emacs-lisp
     (add-hook
      'js-mode-hook
      (lambda ()
        (display-fill-column-indicator-mode 1)))
   #+end_src
** Slim templates
   #+begin_src emacs-lisp
     (straight-use-package
      '(slim-mode :type git :flavor melpa :host github :repo "slim-template/emacs-slim"))
   #+end_src
** Janet
   #+begin_src emacs-lisp
     (straight-use-package
      '(janet-mode :type git :flavor melpa :host github :repo "ALSchwalm/janet-mode"))

     (straight-use-package
      '(s :type git :flavor melpa :host github :repo "magnars/s.el"))
     (straight-use-package
      '(inf-janet :type git :host github :repo "velkyel/inf-janet"))

     (load-file "~/ob-janet.el")
     (add-to-list 'org-babel-load-languages '(janet . t))

     (add-hook
      'janet-mode-hook
      (lambda ()
        (display-fill-column-indicator-mode 1)
        (rainbow-delimiters-mode)
        (require 'inf-janet)
        (setq inf-janet-program "/usr/local/bin/janet")
        (inf-janet-minor-mode)))
   #+end_src
** YAML
   #+begin_src emacs-lisp
     (straight-use-package
      '(yaml-mode :type git :flavor melpa :host github :repo "yoshiki/yaml-mode"))

     (require 'yaml-mode)
     (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

     (add-hook 'yaml-mode-hook
               (lambda ()
                 (define-key yaml-mode-map (kbd "C-m") #'newline-and-indent)))
   #+end_src
** Graphviz dot
#+begin_src emacs-lisp
  (straight-use-package
   '(graphviz-dot-mode :type git :flavor melpa :host github :repo "ppareit/graphviz-dot-mode"))
#+end_src
* Second brain
** Note taking
#+begin_src emacs-lisp
  (straight-use-package
   '(denote :type git :host github :repo "emacs-straight/denote" :files ("*" (:exclude ".git"))))

  (setq denote-directory (expand-file-name "~/zettelkasten"))
  (setq denote-known-keywords '())
  (setq denote-allow-multi-word-keywords nil)
  (setq denote-file-type 'markdown-toml)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

  (let ((map global-map))
    (define-key map (kbd "C-c n n") #'denote)
    (define-key map (kbd "C-c n N") #'denote-type)
    (define-key map (kbd "C-c n d") #'denote-date)
    (define-key map (kbd "C-c n s") #'denote-subdirectory)
    (define-key map (kbd "C-c n t") #'denote-template)
    ;; If you intend to use Denote with a variety of file types, it is
    ;; easier to bind the link-related commands to the `global-map', as
    ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
    ;; `markdown-mode-map', and/or `text-mode-map'.
    (define-key map (kbd "C-c n i") #'denote-link) ; "insert" mnemonic
    (define-key map (kbd "C-c n I") #'denote-link-add-links)
    (define-key map (kbd "C-c n b") #'denote-link-backlinks)
    (define-key map (kbd "C-c n f f") #'denote-link-find-file)
    (define-key map (kbd "C-c n f b") #'denote-link-find-backlink)
    ;; Note that `denote-rename-file' can work from any context, not just
    ;; Dired bufffers.  That is why we bind it here to the `global-map'.
    (define-key map (kbd "C-c n r") #'denote-rename-file)
    (define-key map (kbd "C-c n R") #'denote-rename-file-using-front-matter))
#+end_src
