* Config management
`C-x C-l` reloads the init-file.

#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file "~/.emacs.d/init.el")
    (princ "Init-file reloaded."))

  (global-set-key (kbd "C-x C-l") 'reload-init-file)
#+END_SRC

* Org-mode
Use `<se` shortuct to insert emacs-lisp source blocks.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("se" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* Essentials
Sane defaults.

#+BEGIN_SRC emacs-lisp
  (toggle-scroll-bar -1)
  (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
  (add-to-list 'default-frame-alist '(height . 44))
  (add-to-list 'default-frame-alist '(width . 184))
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)

  ;; On MacOS due to retina display font should be bigger.
  (if (eq system-type 'darwin)
      (set-face-attribute 'default nil :font "Iosevka" :height 120)
    (set-face-attribute 'default nil :font "Fantasque Sans Mono" :height 110))
  (global-auto-revert-mode 1)
  (delete-selection-mode 1)
  (global-subword-mode 1)
  (setq-default
   indicate-empty-lines 1
   tab-width 4
   fill-column 80)

  (setq
   scroll-conservatively most-positive-fixnum
   column-number-mode t
   auto-save-timeout 60
   load-prefer-newer t
   read-file-name-completion-ignore-case t
   indent-tabs-mode nil
   require-final-newline t
   uniquify-buffer-name-style 'forward
   gc-cons-threshold 800000
   create-lockfiles nil
   backup-directory-alist '(("." . "~/.emacs.d/backup"))
   backup-by-copying t                 ; Don't delink hardlinks
   version-control t                   ; Use version numbers on backups
   delete-old-versions t               ; Automatically delete excess backups
   kept-new-versions 20                ; how many of the newest versions to keep
   kept-old-versions 5                 ; and how many of the old
   dired-dwim-target t
   vc-follow-symlinks t
   )

  (add-hook 'prog-mode-hook 'my-prog-mode-hook)
  (add-hook 'comint-mode-hook 'my-comint-mode-hook)
  (defun my-prog-mode-hook ()
    "Prog mode hook consisting of built-in functions and packages."
    (show-paren-mode 1)
    (electric-pair-local-mode t)
    (setq show-trailing-whitespace t))
  (defun my-comint-mode-hook ()
    "Prog mode hook consisting of built-in functions and packages."
    (show-paren-mode 1)
    (electric-pair-local-mode t))
#+END_SRC

* Package management
** straight.el

Bootstrap straight.el.

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

** use-package

Bootstrap use-package and activate `chords' extension.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t
		use-package-always-demand t)
  (use-package use-package-chords
	:config (key-chord-mode 1))
#+END_SRC

* Theme
** Cyberpunk
Cool cyberpunk theme.

# #+BEGIN_SRC emacs-lisp
#   (use-package cyberpunk-theme
#     :config (load-theme 'cyberpunk t)
# 	:custom-face
#     (ivy-virtual ((t (:inherit font-lock-constant-face)))))
# #+END_SRC

** My cyberpunk

#+BEGIN_SRC emacs-lisp
  (straight-use-package
   '(cyberpunk-theme :type git :flavor melpa :host github :repo "n3mo/cyberpunk-theme.el"
					 :fork (:repo "greenfork/cyberpunk-theme.el" :host github :branch "add-diredfl-support")))
  (load-theme 'cyberpunk t)
  (global-set-key (kbd "C-h z") 'face-at-point)
#+END_SRC

* Keybindings
** Saner defaults

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-z") nil)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "C-x K") 'kill-buffer)
#+END_SRC

** Keychords

Use fast key presses in the same way as sequential combinations.

#+BEGIN_SRC emacs-lisp
  (use-package key-chord)
#+END_SRC

* UI
** Diminish

Diminish hides modes in modeline. Make sure it is loaded before any other mode
uses `:diminish' option.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
	:config (progn
			  (diminish 'eldoc-mode)
			  (diminish 'subword-mode)))
#+END_SRC

** Window management
*** Winner

Restore previous window configuration e.g. after `C-x 1'.

#+BEGIN_SRC emacs-lisp
  (use-package winner
    :config (winner-mode 1))
#+END_SRC

*** Ace-window

Jump to windows you choose.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
	:bind (("C-x o" . ace-window)))
#+END_SRC

** Ibuffer

Group by projectile projects.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-projectile
	:hook (ibuffer . ibuffer-projectile-set-filter-groups)
	:config
	(setq ibuffer-projectile-prefix "Project: "))
#+END_SRC

** Dired

Add fancy highlighting to dired.

#+BEGIN_SRC emacs-lisp
  (use-package diredfl
	:config (diredfl-global-mode))
#+END_SRC

Display git info by pressing right paren in dired.

#+BEGIN_SRC emacs-lisp
  (use-package dired-git-info
	:bind (:map dired-mode-map
				(")" . dired-git-info-mode)))
#+END_SRC

** hl-fill-column

Highlight character when line exceeds `fill-column' value.

#+BEGIN_SRC emacs-lisp
  (use-package hl-fill-column
	:hook (prog-mode . hl-fill-column-mode))
#+END_SRC

** Rainbow delimiters

Colored parens depending of their nest level.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Ido-yes-or-no

Quickly answer annoying questions with a single letter.

#+BEGIN_SRC emacs-lisp
  (use-package ido-yes-or-no
	:config (ido-yes-or-no-mode 1))
#+END_SRC

** Which-key

Show possible key shortcuts after pressing e.g. `C-x'.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish
	:config (which-key-mode t))
#+END_SRC

* Source control
** Magit

Porcelain wrapper around git.

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** diff-hl

Show git status in fringes.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config (global-diff-hl-mode)
    :hook ((magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
           (magit-post-refresh-hook . diff-hl-magit-post-refresh)))

  ;; Workaround to not clip fringes https://github.com/dgutov/diff-hl/issues/94
  (setq window-divider-default-places 'right-only) ;Default 'right-only
  (setq window-divider-default-right-width 1) ;Default 6
  (window-divider-mode 1)
#+END_SRC

* Completion
** Company

Completion of text as you type.
Complete selected item with `C-f', `Enter' should produce newline.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
	:init
	(setq company-idle-delay 0.4
		  company-minimum-prefix-length 2
		  company-tooltip-limit 16
		  company-tooltip-align-annotations t
		  company-require-match 'never)
	:config (progn
			  (global-company-mode)
			  (define-key company-active-map (kbd "M-n") nil)
			  (define-key company-active-map (kbd "M-p") nil)
			  (define-key company-active-map (kbd "RET") nil)
			  (define-key company-active-map [return] nil)
			  (define-key company-active-map (kbd "C-n") 'company-select-next)
			  (define-key company-active-map (kbd "C-p") 'company-select-previous)
			  (define-key company-active-map (kbd "C-f") 'company-complete-selection)))
#+END_SRC

** Ivy

General completion framework for all sorts of commands.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish
	:config
	(ivy-mode 1)
	(counsel-mode 1)
	(setq ivy-use-virtual-buffers t
		  ivy-count-format "(%d/%d) "
		  ivy-height 17
		  ivy-on-del-error-function #'ignore))

  (diminish 'ivy-mode)

  ;; Standard keybindings
  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)

  ;; Integration with system tools
  (global-set-key (kbd "C-c c") 'counsel-compile)
  (global-set-key (kbd "C-c L") 'counsel-git-log)

  ;; Resume commands
  (global-set-key (kbd "C-c C-r") 'ivy-resume)

  (use-package ivy-rich
	:after ivy
	:config
	(ivy-rich-mode 1)
	(setq ivy-rich-parse-remote-buffer nil
		  ivy-rich-path-style 'abbrev))
#+END_SRC

** Amx

Better completion of `M-x'. Also adds `M-X' for major mode specific commands.

#+BEGIN_SRC emacs-lisp
  (use-package amx
	:config (amx-mode)
	:bind (("M-X" . amx-major-mode-commands)))
#+END_SRC

* Source discovery
** Helpful

Show more info in help views.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-c C-d" . helpful-at-point)))
#+END_SRC

* Source navigation
** Avy

Quickly type `jj' and several consequtive characters of the place you want to jump to.

#+BEGIN_SRC emacs-lisp
  (use-package avy
	:chords (("jj" . avy-goto-char-timer)))
#+END_SRC

** Imenu

I don't know how this works but it is pretty good.

#+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
    :bind (("C-." . imenu-anywhere)))
#+END_SRC

* Project management
** Projectile

Magical `C-c p' to access all commands related to a current directory project.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
	:bind (("C-c p" . projectile-command-map))
	:config
	(projectile-mode +1)
	(setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
	:after counsel
    :config (counsel-projectile-mode))
#+END_SRC

* Checkers
** Flycheck

Check syntax on-the-fly. Almost: checking syntax on the fly gives false
positives because the line is incomplete and it freezes the system when
linter is slow.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
	:config (global-flycheck-mode)
	(setq flycheck-check-syntax-automatically '(save mode-enabled idle-buffer-switch)
		  flycheck-buffer-switch-check-intermediate-buffers t
		  flycheck-display-errors-delay 0.25))

  (use-package flycheck-popup-tip
	:hook (flycheck-mode . flycheck-popup-tip-mode)
	:config (setq flycheck-popup-tip-error-prefix "✕ "))
#+END_SRC

* Editing
** Crux

Different utility commands.

#+BEGIN_SRC emacs-lisp
  (use-package crux
	:bind (("M-o" . crux-smart-open-line)
		   ("M-O" . crux-smart-open-line-above)
		   ("C-c D" . crux-delete-file-and-buffer)
		   ("C-c R" . crux-rename-file-and-buffer)
		   ("C-^" . crux-top-join-line)
		   ([remap move-beginning-of-line] . crux-move-beginning-of-line)
		   ("C-c f" . crux-recentf-find-file))
	:config (progn
			  (crux-with-region-or-line kill-region)
			  (crux-with-region-or-line kill-ring-save))
	:chords ("JJ" . crux-switch-to-previous-buffer))
#+END_SRC

** Undo

Type `uu' to look at and navigate undo tree.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	:chords ("uu" . undo-tree-visualize)
	:config
	(setq undo-tree-visualizer-diff t
		  undo-tree-auto-save-history t
		  undo-tree-enable-undo-in-region t
		  ;; Increase undo-limits by a factor of ten to avoid emacs prematurely
		  ;; truncating the undo history and corrupting the tree. See
		  ;; https://github.com/syl20bnr/spacemacs/issues/12110
		  undo-limit 800000
		  undo-strong-limit 12000000
		  undo-outer-limit 120000000)

	;; Strip text properties from undo-tree data to stave off bloat. File size
	;; isn't the concern here; undo cache files bloat easily, which can cause
	;; freezing, crashes, GC-induced stuttering or delays when opening files.
	(defadvice undo-list-transfer-to-tree (before strip-undo-tree-text-properties)
	  (dolist (item buffer-undo-list)
		(and (consp item)
			 (stringp (car item))
			 (setcar item (substring-no-properties (car item)))))))
#+END_SRC

** Expand-region

Consequtively expand the current region by pressing `C-='.
Shrink it by preceding this command with `C--' (minus).

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
	:bind ("C-=" . er/expand-region))
#+END_SRC

** Wgrep

Type `C-p' in a grep buffer to make it editable.

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
	:config (setq wgrep-auto-save-buffer t))
#+END_SRC

* Languages
** Ruby

- ruby-mode
- slim-mode
- rubocop
- minitest
- projectile-rails

Nothing too fancy, just standard Ruby stuff.

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
	:config
	(setq ruby-insert-encoding-magic-comment nil))
#+END_SRC

Mode for templating enginge "slim".

#+BEGIN_SRC emacs-lisp
  (use-package slim-mode)
#+END_SRC

Mode for linter, mostly for autocorrect feature, because everything
else is done via Flycheck. Accessible with `M-x'.

#+BEGIN_SRC emacs-lisp
  (use-package rubocop)
#+END_SRC

Interface for "minitest" testing framework, accessible via `C-c ,'.

#+BEGIN_SRC emacs-lisp
  (use-package minitest
	:after projectile-rails
	:hook
	(ruby-mode . (lambda ()
				   ;; Enable rails support.
				   ;; Function body is copied from `projectile-rails-on'.
				   (when (and
						  (not (projectile-rails--ignore-buffer-p))
						  (projectile-project-p)
						  (projectile-rails-root))
					 (setq minitest-use-spring t))

				   (minitest-mode))))
#+END_SRC

Access rails-specific commands with `C-c r'.

#+BEGIN_SRC emacs-lisp
  (use-package projectile-rails
	:config (projectile-rails-global-mode)
	:bind (:map projectile-rails-mode-map
				("C-c r" . projectile-rails-command-map)))
#+END_SRC

** Yaml

Just yaml, no fancy stuff here.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
	:hook (yaml-mode . (lambda () (setq tab-width yaml-indent-offset))))
#+END_SRC

