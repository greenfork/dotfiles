* Config management
`C-x C-l` reloads the init-file

#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file "~/.emacs.d/init.el")
    (princ "Init-file reloaded."))

  (global-set-key (kbd "C-x C-l") 'reload-init-file)
#+END_SRC

* Org-mode
Use `<se` shortuct to insert emacs-lisp source blocks

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("se" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* Essentials
Sane defaults

#+BEGIN_SRC emacs-lisp
  (toggle-scroll-bar -1)
  (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
  (add-to-list 'default-frame-alist '(height . 44))
  (add-to-list 'default-frame-alist '(width . 184))
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)

  ;; On MacOS due to retina display font should be bigger.
  (if (eq system-type 'darwin)
      (set-face-attribute 'default nil :font "Iosevka" :height 120)
    (set-face-attribute 'default nil :font "Fantasque Sans Mono" :height 110))
  (global-auto-revert-mode 1)
  (delete-selection-mode 1)
  (global-subword-mode 1)
  (setq-default
   indicate-empty-lines 1
   tab-width 4
   fill-column 80)

  (setq
   scroll-conservatively most-positive-fixnum
   column-number-mode t
   auto-save-timeout 60
   load-prefer-newer t
   read-file-name-completion-ignore-case t
   indent-tabs-mode nil
   require-final-newline t
   uniquify-buffer-name-style 'forward
   gc-cons-threshold 800000
   create-lockfiles nil
   backup-directory-alist '(("." . "~/.emacs.d/backup"))
   backup-by-copying t                 ; Don't delink hardlinks
   version-control t                   ; Use version numbers on backups
   delete-old-versions t               ; Automatically delete excess backups
   kept-new-versions 20                ; how many of the newest versions to keep
   kept-old-versions 5                 ; and how many of the old
   dired-dwim-target t
   )

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-z") nil)

  (add-hook 'prog-mode-hook 'my-prog-mode-hook)
  (add-hook 'comint-mode-hook 'my-comint-mode-hook)
  (defun my-prog-mode-hook ()
    "Prog mode hook consisting of built-in functions and packages."
    (show-paren-mode 1)
    (electric-pair-local-mode t)
    (setq show-trailing-whitespace t))
  (defun my-comint-mode-hook ()
    "Prog mode hook consisting of built-in functions and packages."
    (show-paren-mode 1)
    (electric-pair-local-mode t))
#+END_SRC

* Package management
Bootstrap straight.el

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Install use-package

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package cyberpunk-theme
    :config (load-theme 'cyberpunk t))
#+END_SRC

* UI
** Visual defaults
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :config (progn
              (diminish 'eldoc-mode)
              (diminish 'subword-mode)))
  (use-package which-key
    :diminish
    :config (which-key-mode t))
  (use-package anzu
    :diminish
    :config (global-anzu-mode 1))
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package hl-fill-column
    :hook (prog-mode . hl-fill-column-mode))
#+END_SRC

** Window management

#+BEGIN_SRC emacs-lisp
  (use-package winner
    :config (winner-mode 1))
#+END_SRC

** Version control

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config (global-diff-hl-mode)
    :hook ((magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
           (magit-post-refresh-hook . diff-hl-magit-post-refresh)))
#+END_SRC
* Completion

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :config (smex-initialize)
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)))
#+END_SRC

* Source navigation/discovery
** General

More helpful commands

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-c C-d" . helpful-at-point)))
#+END_SRC

Imenu everywhere

#+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
    :bind (("C-." . imenu-anywhere)))
#+END_SRC

** Project management
Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config (projectile-mode +1)
    :bind (("C-c p" . projectile-command-map)))
  (use-package projectile-ripgrep)
#+END_SRC

Version control

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

* Editing
** General

Crux

#+BEGIN_SRC emacs-lisp
  (use-package crux
    :bind (("M-o" . crux-smart-open-line)
           ("M-O" . crux-smart-open-line-above)
           ("C-c D" . crux-delete-file-and-buffer)
           ("C-c r" . crux-rename-file-and-buffer)
           ("C-^" . crux-top-join-line)
           ([remap move-beginning-of-line] . crux-move-beginning-of-line))
    :config (progn
              (crux-with-region-or-line kill-region)
              (crux-with-region-or-line kill-ring-save)))
#+END_SRC


