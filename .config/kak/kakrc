# Installation instructions:
# 1. git clone https://github.com/andreyorst/plug.kak.git ~/.config/kak/plugins/plug.kak
# 2. Install bat, fd, ripgrep, sk, git, tmux packages
# 3. Run ':plug-install' inside kakoune
# 4. Reload kakoune
# 5. Profit

source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Language Server Protocol stuff

plug "ul/kak-lsp" do %{
    cargo install --locked --force --path .
} config %{
    hook global KakEnd .* lsp-exit

    def lsp-engage -docstring 'Enable language server' %{
        set global lsp_cmd "kak-lsp -s %val{session} -c /home/grfork/.config/kak/plugins/kak-lsp/kak-lsp.toml"
        lsp-enable
        lsp-auto-hover-enable
        map global user -docstring 'Enter lsp user mode' l ': enter-user-mode lsp<ret>'
        map global user -docstring 'Lock lsp user mode' L ': enter-user-mode -lock lsp<ret>'
    }
}

# Highlighters

# colorscheme tomorrow-night

plug 'greenfork/active-window.kak'
add-highlighter global/ number-lines -relative -separator ' ' -hlcursor
add-highlighter global/column_highlighter column 80 default,rgb:303030
add-highlighter global/ wrap -word -indent
add-highlighter global/ regex '(\h+$|\n\n+\z)' 0:default,red
add-highlighter global/ show-matching
set-face global MatchingChar default,magenta
add-highlighter global/ regex '\b(TODO|FIXME|NOTE|REVIEW)\b' 0:default+rb
plug 'alexherbo2/search-highlighter.kak'
plug 'https://gitlab.com/fsub/kakoune-mark' config %{
	map global user -docstring 'mark word with color' m ': mark-word<ret>'
    map global user -docstring 'unmark all words with color' M ': mark-clear<ret>'
}

# General options

map global normal -docstring 'enter user mode' <space> ,
map global normal -docstring 'remove all sels except main' <backspace> <space>
map global normal -docstring 'remove main sel' <a-backspace> <a-space>
set-option global autoreload yes
map global normal ^ q
map global normal <a-^> Q
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>
set global scrolloff 7,7
# press <esc> on jk chord
hook global InsertChar k %{ try %{
    execute-keys -draft hH <a-k>jk<ret> d
    execute-keys <esc>
}}
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}
map global user w -docstring 'save file' ': write<ret>'
map global user q -docstring 'save and quit' ': write-quit<ret>'
map global user r -docstring 'save and recompile' ': write<ret>: make<ret>'

# Navigation

define-command newv -params .. -command-completion -docstring '"new" but vertical' %{
    try %{
        tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
    }
}
plug 'delapouite/kakoune-cd' config %{
    map global user c ': enter-user-mode cd<ret>' -docstring 'cd'
    alias global cdb change-directory-current-buffer
    alias global cdr change-directory-project-root
    alias global ecd edit-current-buffer-directory
    alias global pwd print-working-directory
}
plug 'andreyorst/fzf.kak'
require-module fzf
# set-option global fzf_implementation 'sk'
set-option global fzf_file_command 'fd -H --exclude .git'
# set-option global fzf_sk_grep_command 'rg -iLHn'
set-option global fzf_highlight_command 'bat'
map global user p -docstring 'fzf' ': change-directory-project-root; fzf-mode<ret>'

plug 'TeddyDD/kakoune-edit-or-dir' config %{
    define-command open-current-directory -docstring 'Open directory of current buffer' %{
        edit-or-dir %sh{dirname $kak_buffile}
    }
    unalias global e edit
    alias global e edit-or-dir
    alias global dir open-current-directory
}
plug 'Delapouite/kakoune-buffers' config %{
    hook global WinDisplay .* info-buffers
    map global normal -docstring 'buffers...' b ': enter-buffers-mode<ret>'
    map global normal -docstring 'buffers (lock)...' B ': enter-user-mode -lock buffers<ret>'
}

# Editing

map global normal -docstring 'comment line' '#' ': comment-line<ret>'
map global normal -docstring 'comment line' '<a-#>' ': comment-block<ret>'
define-command clean-trailing-whitespace -docstring 'Remove trailing whitespace' %{
    try %{ execute-keys -draft '%s\h+$<ret>d' }
    try %{ execute-keys -draft '%s\n+\z<ret>d' }
}
plug 'andreyorst/smarttab.kak' defer smarttab %{
    set-option global softtabstop 4
} config %{
    define-command no-tabs -params 0..1 -docstring 'Indent with spaces' %{
        eval %sh{ [ -n '$1' ] && printf %s "
            set-option buffer indentwidth $1
            set-option buffer tabstop $1
            # set-option buffer softtabstop $1
        " }
        expandtab
    }
}
plug 'alexherbo2/auto-pairs.kak'
plug 'occivink/kakoune-snippets' config %{
    set-option global snippets_auto_expand false
    set-option -add global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
    define-command snippets-expand-any-trigger %[
        snippets-expand-trigger %{
            reg / "%opt{snippets_triggers_regex}"
            exec 'hGhs<ret>'
        }
    ]
    map -docstring 'expand any trigger' global insert <c-t> '<esc>: snippets-expand-any-trigger<ret>i'
    map -docstring 'select next snippet placeholder' global insert <c-l> '<esc>: snippets-select-next-placeholders<ret>i'
}
plug "greenfork/kakoune-snippet-collection" branch "personal"

# Searching

plug 'occivink/kakoune-find'
set-option global grepcmd 'rg -iHL --column'

# Language options

define-command lint-on-write -docstring 'Activate linting on buffer write' %{
    lint-enable
    hook window BufWritePost .* lint
    lint
}
hook global WinSetOption filetype=kak %{ no-tabs 4 }
hook global WinSetOption filetype=yaml %{ no-tabs 2 }
hook global WinSetOption filetype=javascript %{ no-tabs 2 }
hook global WinSetOption filetype=html %{
    no-tabs 4
    lsp-engage
}
hook global WinSetOption filetype=(css|scss) %{
    no-tabs 2
    lsp-engage
}
hook global WinSetOption filetype=json %{
    no-tabs 4
    lsp-engage
}
hook global WinSetOption filetype=ledger %{ no-tabs 4 }

hook global BufCreate .*\.erb %{ set-option buffer filetype html }
hook global BufCreate .*\.journal %{ set-option buffer filetype ledger }

# Set link to rubocop in /usr/local/bin/. If using rvm, use "wrappers" folder
# to locate rubocop binary: ~/.rvm/gems/ruby-x.x.x/wrappers/rubocop
hook global BufCreate .*\.jbuilder %{ set-option buffer filetype ruby }
hook global WinSetOption filetype=ruby %{
    set-option window lintcmd 'run() { cat "$1" | /usr/local/bin/rubocop -s "$kak_buffile"; } && run '
    set-option window formatcmd '/usr/local/bin/rubocop -a "$kak_buffile"'
    lint-on-write
    no-tabs 2
}
hook global WinSetOption filetype=nim %{
    set-option buffer formatcmd "nimpretty ${kak_buffile}"
    set-option buffer makecmd 'nimble build'
    no-tabs 2
    lsp-engage # add `args` to toml config and set as path to nim sources
}
hook global WinSetOption filetype=go %{
    noexpandtab
    lsp-engage
    hook window BufWritePost .* %{ go-format -use-goimports }
}
# eslint should be installed as a local packages via npm or yarn
hook global WinSetOption filetype=(html|javascript) %{
  evaluate-commands %sh{
    exec 2>/dev/null # silence STDERR
    eslintrc_path=$(ls -1 .eslintrc* || (grep -q 'eslintConfig' package.json && echo 'package.json'))
    if [ -n "$eslintrc_path" ]; then
      if [ -x ./node_modules/.bin/eslint ]; then
        eslint_path='./node_modules/.bin/eslint'
      elif command -v eslint > /dev/null 2>&1; then
        eslint_path='eslint'
      else
        echo "echo -debug 'No eslint available'"
        exit 1
      fi
      echo "set-option buffer lintcmd '"$eslint_path" --config "$eslintrc_path" --format ~/.config/kak/eslint-formatter-kakoune.js --stdin-filename "$kak_buffile" --stdin <'"
      echo "set-option buffer formatcmd '"$eslint_path" --config "$eslintrc_path" --fix "$kak_buffile"'"
      echo 'lint-on-write'
    fi
  }
}
hook global WinSetOption filetype=dart %{
    no-tabs 2
}
hook global WinSetOption filetype=elvish %{
    no-tabs 2
}

# Git

plug 'lenormf/kakoune-extra' subset %{
    vcs.kak
}
hook global WinCreate .* %{ evaluate-commands %sh{
    if [ -n "${kak_opt_vcs_root_path}" ]; then
        case "${kak_opt_vcs_name}" in
            git)
                echo "
                    git show-diff
                    hook global BufWritePost %val{buffile} %{git update-diff}
                    hook global BufReload %val{buffile} %{git update-diff}
                    hook global WinDisplay %val{buffile} %{git update-diff}
                ";;
        esac
    fi
} }

declare-option -docstring 'name of the git branch holding the current buffer' \
    str modeline_git_branch
hook global WinCreate .* %{
    hook window NormalIdle .* %{ evaluate-commands %sh{
        branch=$(cd "$(dirname '${kak_buffile}')" && git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [ -n "${branch}" ]; then
            printf 'set window modeline_git_branch %%{%s}' "${branch}"
        fi
    } }
}

# ctags

define-command gen-ctags %{
    echo %sh{git ls-files | xargs ctags 2>/dev/null &}
}
hook global ClientCreate .* %{ evaluate-commands %sh{
    if [ -n "${kak_opt_vcs_root_path}" ]; then
        case "${kak_opt_vcs_name}" in
            git)
                echo "
                    hook global BufWritePost .* gen-ctags
                ";;
        esac
    fi
} }


# Readline key bindings
# https://github.com/lenormf/kakoune-extra
map -docstring 'move the cursor one character to the left' global insert <c-b> <esc>hi
map -docstring 'move the cursor one character to the right' global insert <c-f> <esc>li
map -docstring 'move the cursor to the start of the line' global insert <c-a> <esc>I
map -docstring 'move the cursor to the end of the line' global insert <c-e> <esc>glli
map -docstring 'delete the character under the anchor' global insert <c-d> <esc>c

# For my own amusement

hook global WinSetOption modeline_git_branch=.* %{
    evaluate-commands %sh{
        echo "set-option window modelinefmt %{"
        echo "%val{bufname}"
        [ -n "${kak_opt_vcs_root_path}" ] && echo "%opt{vcs_name}[%opt{modeline_git_branch}]"
        echo "%val{cursor_line}:%val{cursor_char_column}"
        echo "{{context_info}} {{mode_info}} - %val{client}@[%val{session}]"
        echo "}"
    }
}

# Load local project config
try %{ source '.local.kak' }
