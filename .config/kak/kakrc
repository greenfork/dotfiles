# Installation instructions:
# 1. git clone https://github.com/andreyorst/plug.kak.git ~/.config/kak/plugins/plug.kak
# 2. Install bat, fd, ripgrep, fzf, git packages
# 2.1. Optional: tmux/kitty (uncomment appropriate fzf functionality)
# 2.2. Optional: dos2unix, wl-clipboard for Wayland (configure kakboard accordingly)
# 3. Uncomment all plug-related stuff
# 4. Run ':plug-install' inside kakoune
# 5. Comment it back
# 6. Reload kakoune
# 7. Profit

# source "%val{config}/plugins/plug.kak/rc/plug.kak"
# plug 'alexherbo2/auto-pairs.kak'
# plug 'alexherbo2/search-highlighter.kak'
# plug 'andreyorst/smarttab.kak'
# plug 'Delapouite/kakoune-buffers'
# plug 'delapouite/kakoune-cd'
# plug 'greenfork/active-window.kak'
# plug 'https://gitlab.com/fsub/kakoune-mark'
# plug 'lenormf/kakoune-extra'
# plug 'lePerdu/kakboard'
# plug 'occivink/kakoune-find'

# Following plugins require Rust compilation prior to use.
# plug 'eraserhd/parinfer-rust'
# plug 'ul/kak-lsp'

source "%val{config}/plugins/auto-pairs.kak/rc/auto-pairs.kak"
source "%val{config}/plugins/search-highlighter.kak/rc/search-highlighter.kak"
source "%val{config}/plugins/smarttab.kak/rc/smarttab.kak"
source "%val{config}/plugins/kakoune-buffers/buffers.kak"
source "%val{config}/plugins/kakoune-cd/cd.kak"
source "%val{config}/plugins/active-window.kak/rc/active-window.kak"
source "%val{config}/plugins/kakoune-mark/mark.kak"
source "%val{config}/plugins/kakoune-extra/vcs.kak"
source "%val{config}/plugins/kakboard/kakboard.kak"
source "%val{config}/plugins/kakoune-find/find.kak"
source "%val{config}/plugins/parinfer-rust/rc/parinfer.kak"
eval %sh{kak-lsp --kakoune -s $kak_session}

# source "/home/grfork/reps/active-window.kak/rc/active-window.kak"

# Language Server Protocol
##########################

# plug "ul/kak-lsp"
hook global KakEnd .* lsp-exit
# set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
map global user -docstring 'Enter lsp user mode' l ': enter-user-mode lsp<ret>'
map global user -docstring 'Lock lsp user mode' L ': enter-user-mode -lock lsp<ret>'
def lsp-engage -docstring 'Enable language server' %{
   lsp-enable-window
   lsp-auto-hover-enable
}



# Ruby on rails
###############

define-command ror-test %{ evaluate-commands %sh{
    output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-grep.XXXXXXXX)/fifo
    mkfifo ${output}
    ( spring rails test ${kak_quoted_buffile}:${kak_cursor_line} > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
    printf %s\\n "evaluate-commands %{
              edit! -fifo ${output} -scroll *rails-test*
              hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
          }"
} }



# Highlighters
##############

add-highlighter global/ number-lines -relative -separator ' ' -hlcursor
add-highlighter global/column_highlighter column 80 default,rgb:303030
add-highlighter global/ wrap -word -indent
add-highlighter global/ regex '(\h+$|\n\n+\z)' 0:default,red
add-highlighter global/ show-matching
set-face global MatchingChar default,magenta
add-highlighter global/ regex '\b(TODO|FIXME|NOTE|REVIEW)\b' 0:default+rb

# plug 'https://gitlab.com/fsub/kakoune-mark'
map global user -docstring 'mark word with color' m ': mark-word<ret>'
map global user -docstring 'unmark all words with color' M ': mark-clear<ret>'



# General options
################

map global normal -docstring 'enter user mode' <space> ,
map global normal -docstring 'remove all sels except main' <backspace> <space>
map global normal -docstring 'remove main sel' <a-backspace> <a-space>
set-option global autoreload yes
map global normal ^ q
map global normal <a-^> Q
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>
set global scrolloff 7,7
# press <esc> on jk chord
hook global InsertChar k %{ try %{
    execute-keys -draft hH <a-k>jk<ret> d
    execute-keys <esc>
}}
map global user w -docstring 'save file' ': write<ret>'
map global user q -docstring 'save and quit' ': write-quit<ret>'
map global user r -docstring 'save and recompile' ': write<ret>: make<ret>'

# plug "lePerdu/kakboard"
# hook global WinCreate .* %{ kakboard-enable }
# This is much faster.
set global kakboard_copy_cmd 'wl-copy'
set global kakboard_paste_cmd 'wl-paste -n | dos2unix'

map global normal y ': kakboard-with-push-clipboard y<ret>'
map global normal c ': kakboard-with-push-clipboard c<ret>'
map global normal d ': kakboard-with-push-clipboard d<ret>'

map global normal p ': kakboard-with-pull-clipboard p<ret>'
map global normal P ': kakboard-with-pull-clipboard P<ret>'
map global normal R ': kakboard-with-pull-clipboard R<ret>'



# Navigation
############

# fuzzy-finding tmux + fzf
# define-command newv -params .. -command-completion -docstring '"new" but vertical' %{
#     try %{
#         tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
#     }
# }

# define-command fzf %{ evaluate-commands %sh{
#     eval "fd -H --exclude .git --type f --type l" | \
#     eval "fzf-tmux --preview 'bat --color=always --decorations=never {}'" | \
#     while read path; do \
#         printf "eval -client '%s' edit '%s'" "${kak_client}" "${path}" | kak -p "${kak_session}"
#     done
# } }
# define-command fzf-current-directory %{ evaluate-commands %sh{
#     buffer_dirname=$(dirname "$kak_bufname")
#     eval "fd -H --exclude .git --type f --type l --max-depth 1 . ${buffer_dirname}" | \
#     eval "fzf-tmux --preview 'bat --color=always --decorations=never {}'" | \
#     while read path; do \
#         printf "eval -client '%s' edit '%s'" "${kak_client}" "${path}" | kak -p "${kak_session}"
#     done
# } }

# fuzzy-finding kitty + fzf
require-module kitty
# define-command n -params .. -command-completion \
#     -docstring '"new" command wrapper to work with kitty' %{
#     kitty-terminal kak -c %val{session} -e "%arg{@}"
# }
define-command nh -command-completion -docstring '"new" horizontal split for kitty' %{
    nop %sh{
        kitty @ launch --location=hsplit --no-response --cwd "$PWD" kak -c $kak_session
    }
}
define-command n -command-completion -docstring '"new" vertical split for kitty' %{
    nop %sh{
        kitty @ launch --location=vsplit --no-response --cwd "$PWD" kak -c $kak_session
    }
}

define-command fzf %{ evaluate-commands %{
    kitty-terminal-tab sh -c "
        MYTMP=$(mktemp /tmp/mykakfzf.XXXXXX)
        trap 'rm -f $MYTMP' EXIT
        fd -H --exclude .git --type f --type l | \
            fzf --preview 'bat --color=always --decorations=never {}' > $MYTMP
        [ -s $MYTMP ] && echo eval -client %val{client} edit $(cat $MYTMP) | kak -p %val{session}
    "
} }
define-command fzf-current-directory %{ evaluate-commands %{
    kitty-terminal-tab sh -c "
        MYTMP=$(mktemp /tmp/mykakfzf.XXXXXX)
        trap 'rm -f $MYTMP' EXIT
        BUFFER_DIRNAME=$(dirname %val{bufname})
        fd -H --exclude .git --type f --type l . $BUFFER_DIRNAME | \
            fzf --preview 'bat --color=always --decorations=never {}' > $MYTMP
        [ -s $MYTMP ] && echo eval -client %val{client} edit $(cat $MYTMP) | kak -p %val{session}
    "
} }


map global user f -docstring 'fzf' ': fzf<ret>'
map global user d -docstring 'fzf in current dir' ': fzf-current-directory<ret>'

# plug 'delapouite/kakoune-cd'
map global user c ': enter-user-mode cd<ret>' -docstring 'cd'

# plug 'Delapouite/kakoune-buffers'
map global normal -docstring 'buffers...' b ': enter-buffers-mode<ret>'

map global normal / /(?i)



# Editing
#########

map global normal -docstring 'comment line' '#' ': comment-line<ret>'
map global normal -docstring 'comment line' '<a-#>' ': comment-block<ret>'
define-command delete-trailing-whitespace -docstring 'Remove trailing whitespace' %{
    try %{ execute-keys -draft '%s\h+$<ret>d' }
    try %{ execute-keys -draft '%s\n+\z<ret>d' }
}

# plug 'andreyorst/smarttab.kak'
require-module smarttab
set-option global softtabstop 4
define-command no-tabs -params 0..1 -docstring 'Indent with spaces' %{
    eval %sh{ [ -n '$1' ] && printf %s "
        set-option buffer indentwidth $1
        set-option buffer tabstop $1
        # set-option buffer softtabstop $1
    " }
    expandtab
}
define-command split-arguments-multiline -docstring "Split arguments into multiple lines" %{
    execute-keys -with-hooks <a-i>bS, <ret><a-semicolon>i<ret><space><space><esc><space>gli<ret><backspace><esc>
}



# Searching
###########

# plug 'occivink/kakoune-find'
set-option global grepcmd 'rg -iHL --column'



# Language options
##################

set global disabled_hooks .*-trim-indent
define-command lint-on-write -docstring 'Activate linting on buffer write' %{
    hook window BufWritePost .* lint
    lint
}
hook global WinSetOption filetype=kak %{ no-tabs 4 }
hook global WinSetOption filetype=yaml %{ no-tabs 2 }
hook global WinSetOption filetype=javascript %{ no-tabs 2 }
hook global WinSetOption filetype=sql %{ no-tabs 2 }
hook global WinSetOption filetype=lua %{ no-tabs 2 }
hook global WinSetOption filetype=fish %{ no-tabs 4 }
hook global WinSetOption filetype=markdown %{ no-tabs 2 }
hook global WinSetOption filetype=html %{
    no-tabs 2
    lsp-engage
}
hook global WinSetOption filetype=(css|scss) %{
    no-tabs 2
    lsp-engage
}
hook global WinSetOption filetype=json %{
    no-tabs 4
    lsp-engage
}
hook global WinSetOption filetype=ledger %{ no-tabs 4 }
hook global WinSetOption filetype=haskell %{ no-tabs 2 }

hook global BufCreate .*\.erb %{ set-option buffer filetype html }
hook global BufCreate .*\.journal %{ set-option buffer filetype ledger }

hook global BufCreate .*\.jbuilder %{ set-option buffer filetype ruby }
hook global WinSetOption filetype=elixir %{
    remove-highlighter global/column_highlighter
    add-highlighter global/column_highlighter column 98 default,rgb:303030
    set-option window formatcmd 'mix format -'
    no-tabs 2
}
hook global WinSetOption filetype=eex %{
    no-tabs 2
}
hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
    parinfer-enable-window -smart
    no-tabs 2
    set window disabled_hooks '' # reenable trim-indent hooks
}
# Set link to rubocop in /usr/local/bin/. If using rvm, use "wrappers" folder
# to locate rubocop binary: ~/.rvm/gems/ruby-x.x.x/wrappers/rubocop
hook global WinSetOption filetype=ruby %{
    set-option window lintcmd 'run() { cat "$1" | /usr/local/bin/rubocop -s "$kak_buffile"; } && run '
    # set-option window formatcmd '/usr/local/bin/rubocop -a "$kak_buffile"'
    set-option window formatcmd 'rubocop --stdin . -a'
    lint-on-write
    no-tabs 2
}
hook global WinSetOption filetype=zig %{
    set-option window formatcmd 'zig fmt --stdin'
    hook window BufWritePre .* format
    no-tabs 4
    lsp-enable-window

    # lsp semantic tokens
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}
hook global WinSetOption filetype=nim %{
    set-option buffer formatcmd "nimprettify"
    set-option buffer makecmd 'nimble build'
    no-tabs 2
    # lsp-engage # add `args` to toml config and set as path to nim sources
    lsp-enable-window
}
hook global WinSetOption filetype=go %{
    noexpandtab
    lsp-engage
    hook window BufWritePost .* %{ go-format -use-goimports }
}
# eslint should be installed as a local packages via npm or yarn
hook global WinSetOption filetype=(html|javascript) %{
  evaluate-commands %sh{
    exec 2>/dev/null # silence STDERR
    eslintrc_path=$(ls -1 .eslintrc* || (grep -q 'eslintConfig' package.json && echo 'package.json'))
    if [ -n "$eslintrc_path" ]; then
      if [ -x ./node_modules/.bin/eslint ]; then
        eslint_path='./node_modules/.bin/eslint'
      elif command -v eslint > /dev/null 2>&1; then
        eslint_path='eslint'
      else
        echo "echo -debug 'No eslint available'"
        exit 1
      fi
      echo "set-option buffer lintcmd '"$eslint_path" --config "$eslintrc_path" --format ~/.config/kak/eslint-formatter-kakoune.js --stdin-filename "$kak_buffile" --stdin <'"
      echo "set-option buffer formatcmd '"$eslint_path" --config "$eslintrc_path" --fix "$kak_buffile"'"
      echo 'lint-on-write'
    fi
  }
}
hook global WinSetOption filetype=dart %{
    no-tabs 2
}
hook global WinSetOption filetype=elvish %{
    no-tabs 2
}



# Git
#####

# plug 'lenormf/kakoune-extra'
hook global WinCreate .* %{ evaluate-commands %sh{
    if [ -n "${kak_opt_vcs_root_path}" ]; then
        case "${kak_opt_vcs_name}" in
            git)
                echo "
                    git show-diff
                    hook global BufWritePost %val{buffile} %{git update-diff}
                    hook global BufReload %val{buffile} %{git update-diff}
                    hook global WinDisplay %val{buffile} %{git update-diff}
                ";;
        esac
    fi
} }

declare-option -docstring 'name of the git branch holding the current buffer' \
    str modeline_git_branch
hook global WinCreate .* %{
    hook window NormalIdle .* %{ evaluate-commands %sh{
        branch=$(cd "$(dirname '${kak_buffile}')" && git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [ -n "${branch}" ]; then
            printf 'set window modeline_git_branch %%{%s}' "${branch}"
        fi
    } }
}



# ctags
#######

define-command gen-ctags %{
    echo %sh{git ls-files | xargs ctags 2>/dev/null &}
}

# Readline key bindings
map global insert <c-d> <esc>di

# Misc
######

# Load local project config
try %{ source '.local.kak' }
