# Installation instructions:
# 1. git clone https://github.com/andreyorst/plug.kak.git ~/.config/kak/plugins/plug.kak
# 2. Install bat, fd, ripgrep, fzf, git packages
# 2.1. Optional: tmux/kitty (uncomment appropriate fzf functionality)
# 2.2. Optional: dos2unix, wl-clipboard for Wayland (configure kakboard accordingly)
# 2.3. Optional: xclip for Xorg (configure kakboard accordingly)
# 3. Comment all "source" commands and uncomment all "plug" commands
#    (including "source" command for "plug" plugin itself)
# 4. Run ':plug-install' inside kakoune
# 5. Revert commenting and uncommenting
# 6. Reload kakoune
# 7. Profit

# source "%val{config}/plugins/plug.kak/rc/plug.kak"
# plug 'alexherbo2/auto-pairs.kak'
# plug 'andreyorst/smarttab.kak'
# plug 'Delapouite/kakoune-buffers'
# plug 'delapouite/kakoune-cd'
# plug 'greenfork/active-window.kak'
# plug 'https://gitlab.com/fsub/kakoune-mark'
# plug 'lePerdu/kakboard'
# plug 'occivink/kakoune-find'
# plug 'occivink/kakoune-sudo-write'

source "%val{config}/plugins/active-window.kak/rc/active-window.kak"
source "%val{config}/plugins/auto-pairs.kak/rc/auto-pairs.kak"
source "%val{config}/plugins/factor.kak/factor.kak"
source "%val{config}/plugins/kakboard/kakboard.kak"
source "%val{config}/plugins/kakoune-buffers/buffers.kak"
source "%val{config}/plugins/kakoune-cd/cd.kak"
source "%val{config}/plugins/kakoune-find/find.kak"
source "%val{config}/plugins/kakoune-mark/mark.kak"
source "%val{config}/plugins/kakoune-sudo-write/sudo-write.kak"
source "%val{config}/plugins/smarttab.kak/rc/smarttab.kak"
source "%val{config}/plugins/raku.kak/rc/raku.kak"

# source "%val{config}/factor.kak"

# source "%val{config}/plugins/kakoune-factor/autoload/filetype/factor.kak"

# Following plugins require Rust compilation prior to use.
# plug 'eraserhd/parinfer-rust'
# source "%val{config}/plugins/parinfer-rust/rc/parinfer.kak"

# Development of active-window.kak
# source "/home/grfork/reps/active-window.kak/rc/active-window.kak"


# Language Server Protocol
##########################

# plug "ul/kak-lsp"
eval %sh{kak-lsp --kakoune -s $kak_session}
# set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
hook global KakEnd .* lsp-exit
map global user -docstring 'Enter lsp user mode' L ': enter-user-mode lsp<ret>'
def lsp-engage -docstring 'Enable language server' %{
    lsp-enable-window
    lsp-auto-hover-enable
}

# Highlighters
##############

colorscheme desertex

map global normal -docstring 'toggle line numbers' <F7> ': remove-highlighter global/line_numbers<ret>'
map global normal -docstring 'toggle line numbers' <F8> ": add-highlighter -override global/line_numbers number-lines -separator ' ' -hlcursor<ret>"
hook global WinCreate .* %{
    add-highlighter -override window/column_highlighter column 80 default,rgb:303030
    add-highlighter -override window/trailing_space regex '(\h+$|\n\n+\z)' 0:default,red
}
add-highlighter global/ wrap -word -indent
add-highlighter global/ show-matching
add-highlighter global/ dynregex '%reg{/}' 0:+u
set-face global MatchingChar default,magenta
set-face global LineNumbers rgb:404040
set-face global LineNumbersWrapped rgb:404040
add-highlighter global/ regex '\b(TODO|FIXME|NOTE|REVIEW|HACK|XXX)\b' 0:default+rb

# plug 'https://gitlab.com/fsub/kakoune-mark'
# Use manual marking
# map global user -docstring 'mark word with color' m ': mark-word<ret>'
# map global user -docstring 'unmark all words with color' M ': mark-clear<ret>'



# General options
################

set-option global autoreload yes
map global normal ^ q  # execute macro
map global normal <a-^> Q  # record macro
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>
set global scrolloff 5,5
# press <esc> on jk chord
hook global InsertChar k %{ try %{
    execute-keys -draft hH <a-k>jk<ret> d
    execute-keys <esc>
}}
map global user w -docstring 'save file' ': write<ret>'
map global user q -docstring 'save and quit' ': write-quit<ret>'

# plug "lePerdu/kakboard"
# This is much faster than using library hook.
# set global kakboard_copy_cmd 'wl-copy'
# set global kakboard_paste_cmd 'wl-paste -n | dos2unix'
set global kakboard_copy_cmd 'xclip -in -selection clipboard'
set global kakboard_paste_cmd 'xclip -out -selection clipboard'
hook global WinCreate .* %{ kakboard-enable }
map global normal y ': kakboard-with-push-clipboard y<ret>'
map global normal c ': kakboard-with-push-clipboard c<ret>'
map global normal d ': kakboard-with-push-clipboard d<ret>'
map global normal p ': kakboard-with-pull-clipboard p<ret>'
map global normal P ': kakboard-with-pull-clipboard P<ret>'
map global normal R ': kakboard-with-pull-clipboard R<ret>'

# Display visible column instead of the number of characters on the line,
# this is important for a tabbed language Hare that uses hard tabs.
# cursor_char_column -> cursor_display_column
set-option global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_display_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]'


# Building a project
####################

declare-user-mode build
map global normal b ': enter-user-mode build<ret>'
map global build m -docstring 'save and run make' ': write<ret>: make<ret>'
map global build r -docstring 'save and run' ': write<ret>: make<ret>'


# Navigation
############

# fuzzy-finding tmux + fzf
# define-command newv -params .. -command-completion -docstring '"new" but vertical' %{
#     try %{
#         tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
#     }
# }

# define-command fzf %{ evaluate-commands %sh{
#     eval "fd -H --exclude .git --type f --type l" | \
#     eval "fzf-tmux --preview 'bat --color=always --decorations=never {}'" | \
#     while read path; do \
#         printf "eval -client '%s' edit '%s'" "${kak_client}" "${path}" | kak -p "${kak_session}"
#     done
# } }
# define-command fzf-current-directory %{ evaluate-commands %sh{
#     buffer_dirname=$(dirname "$kak_bufname")
#     eval "fd -H --exclude .git --type f --type l --max-depth 1 . ${buffer_dirname}" | \
#     eval "fzf-tmux --preview 'bat --color=always --decorations=never {}'" | \
#     while read path; do \
#         printf "eval -client '%s' edit '%s'" "${kak_client}" "${path}" | kak -p "${kak_session}"
#     done
# } }

# fuzzy-finding kitty + fzf
require-module kitty
define-command nh -command-completion -docstring '"new" horizontal split for kitty' %{
    nop %sh{
        kitty @ launch --location=hsplit --no-response --cwd=current -- kak -c $kak_session
    }
}
define-command n -command-completion -docstring '"new" vertical split for kitty' %{
    nop %sh{
        kitty @ launch --location=vsplit --no-response --cwd=current -- kak -c $kak_session
    }
}

define-command fzf %{ evaluate-commands %{
    kitty-terminal --location=hsplit sh -c "
        MYTMP=$(mktemp /tmp/mykakfzf.XXXXXX)
        trap 'rm -f $MYTMP' EXIT
        if git rev-parse --is-inside-work-tree &> /dev/null; then
            git ls-files
        elif chg root &> /dev/null; then
            chg files .
        else
            fd -H --type f --type l
        fi | \
            fzf --preview 'bat --color=always --decorations=never {}' > $MYTMP
        [ -s $MYTMP ] && echo eval -client %val{client} edit $(cat $MYTMP) | kak -p %val{session}
    "
} }
define-command fzf-always-fd %{ evaluate-commands %{
    kitty-terminal --location=hsplit sh -c "
        MYTMP=$(mktemp /tmp/mykakfzf.XXXXXX)
        trap 'rm -f $MYTMP' EXIT
        fd -H --type f --type l | \
            fzf --preview 'bat --color=always --decorations=never {}' > $MYTMP
        [ -s $MYTMP ] && echo eval -client %val{client} edit $(cat $MYTMP) | kak -p %val{session}
    "
} }
define-command fzf-current-directory %{ evaluate-commands %{
    kitty-terminal --location=hsplit sh -c "
        MYTMP=$(mktemp /tmp/mykakfzf.XXXXXX)
        trap 'rm -f $MYTMP' EXIT
        BUFFER_DIRNAME=$(dirname %val{bufname})
        if git rev-parse --is-inside-work-tree &> /dev/null; then
            git ls-files $BUFFER_DIRNAME
        elif chg root &> /dev/null; then
            chg files $BUFFER_DIRNAME
        else
            fd -H --type f --type l . $BUFFER_DIRNAME
        fi | \
            fzf --preview 'bat --color=always --decorations=never {}' > $MYTMP
        [ -s $MYTMP ] && echo eval -client %val{client} edit $(cat $MYTMP) | kak -p %val{session}
    "
} }

# Modify default grep-jump behavior to work at any place in the file, not only
# when at the very start.
define-command grep-jump2 %{
    evaluate-commands %{ # use evaluate-commands to ensure jumps are collapsed
        try %{
            execute-keys '<a-i><a-w>s((?:\w:)?[^:]+):(\d+)(?::(\d+))?<ret>'
            set-option buffer grep_current_line %val{cursor_line}
            evaluate-commands -try-client %opt{jumpclient} -verbatim -- edit -existing %reg{1} %reg{2} %reg{3}
            try %{ focus %opt{jumpclient} }
        }
    }
}
hook global WinSetOption filetype=grep %{
    hook buffer -group grep-hooks NormalKey <ret> grep-jump2
}

map global user f -docstring 'fzf' ': fzf<ret>'
map global user F -docstring 'fzf' ': fzf-always-fd<ret>'
map global user d -docstring 'fzf in current dir' ': fzf-current-directory<ret>'

# plug 'delapouite/kakoune-cd'
map global user c ': enter-user-mode cd<ret>' -docstring 'cd'

# plug 'Delapouite/kakoune-buffers'
map global user -docstring 'buffers...' b ': enter-buffers-mode<ret>'

declare-user-mode lint
map global user l -docstring 'enter lint mode' ': enter-user-mode lint<ret>'
map global lint l -docstring 'lint' ': lint<ret>'
map global lint n -docstring 'next message' ': lint-next-message<ret>'
map global lint p -docstring 'previous message' ': lint-previous-message<ret>'
map global lint h -docstring 'hide diagnostics' ': lint-hide-diagnostics<ret>'
map global lint e -docstring 'enable lint on write' ': hook -group lint window BufWritePost .* lint<ret>'
map global lint d -docstring 'disable lint on write' ': remove-hooks window lint<ret>'


# Editing
#########

map global normal -docstring 'comment line' '#' ': comment-line<ret>'
map global normal -docstring 'comment block' '<a-#>' ': comment-block<ret>'
define-command delete-trailing-whitespace -docstring 'Remove trailing whitespace' %{
    try %{ execute-keys -draft '%s\h+$<ret>d' }
    try %{ execute-keys -draft '%s\n+\z<ret>d' }
}

# plug 'andreyorst/smarttab.kak'
require-module smarttab
set-option global softtabstop 4
define-command no-tabs -params 0..1 -docstring 'Indent with spaces' %{
    eval %sh{ [ -n '$1' ] && printf %s "
        set-option buffer indentwidth $1
        set-option buffer tabstop $1
        # set-option buffer softtabstop $1
    " }
    expandtab
}
define-command split-arguments-multiline -docstring "Split arguments into multiple lines" %{
    execute-keys -with-hooks <a-i>bS, <ret><a-semicolon>i<ret><space><space><esc><space>gli<ret><backspace><esc>
}

enable-auto-pairs



# Searching
###########

set-option global grepcmd 'rg --ignore-case --with-filename --column --follow'
hook global WinCreate .* %{ evaluate-commands %sh{
    if chg root &> /dev/null; then
        echo "
            set-option window grepcmd 'hg grep --line-number'
        "
    fi
} }

map global normal / /(?i)
map global normal <a-/> <a-/>(?i)



# Language options
##################

set global disabled_hooks .*-trim-indent
define-command lint-on-write -docstring 'Activate linting on buffer write' %{
    hook -group lint window BufWritePost .* lint
    # lint
}
hook global WinSetOption filetype=kak %{ no-tabs 4 }
hook global WinSetOption filetype=factor %{
    no-tabs 4
    set-option window auto_pairs ( ) { } [ ] '"' '"'
}
hook global WinSetOption filetype=yaml %{ no-tabs 2 }
hook global WinSetOption filetype=javascript %{
    no-tabs 2
    set-option window formatcmd 'deno fmt -'
    hook window BufWritePre .* format
}
hook global WinSetOption filetype=sql %{ no-tabs 2 }
hook global WinSetOption filetype=lua %{
    no-tabs 4
    set-option window lintcmd 'luacheck --no-color --filename "$kak_bufname" -'
    lint-on-write
}
hook global BufCreate .*\.vy %{ set-option buffer filetype python }
hook global WinSetOption filetype=python %{ no-tabs 2 }
hook global WinSetOption filetype=fish %{ no-tabs 4 }
hook global WinSetOption filetype=markdown %{ no-tabs 2 }
hook global WinSetOption filetype=zzz %{ no-tabs 2 }
hook global WinSetOption filetype=xml %{ no-tabs 2 }
hook global WinSetOption filetype=makefile %{ noexpandtab }
hook global WinSetOption filetype=hare %{ noexpandtab }
hook global WinSetOption filetype=gas %{ noexpandtab }
# Remove markdown highlighting, it's broken
hook global WinSetOption filetype=markdown %{ set buffer filetype md }
hook global WinSetOption filetype=html %{
    no-tabs 2
    lsp-engage
}
hook global WinSetOption filetype=(css|scss) %{
    no-tabs 2
    lsp-engage
}
hook global WinSetOption filetype=json %{
    no-tabs 4
    lsp-engage
}
hook global WinSetOption filetype=ledger %{ no-tabs 4 }
hook global WinSetOption filetype=haskell %{ no-tabs 2 }
hook global WinSetOption filetype=pony %{ no-tabs 2 }

hook global BufCreate .*\.(erb|eex|heex) %{ set-option buffer filetype html }
hook global BufCreate .*\.journal %{ set-option buffer filetype ledger }
hook global BufCreate .*\.avsc %{ set-option buffer filetype json }
hook global BufCreate .*\.jbuilder %{ set-option buffer filetype ruby }
hook global BufCreate .*/config\.ru %{ set-option buffer filetype ruby }
hook global BufCreate .*\.commit\.hg\.txt %{ set-option buffer filetype diff }
hook global WinSetOption filetype=elixir %{
    add-highlighter -override window/column_highlighter column 98 default,rgb:303030
    set-option window formatcmd 'mix format -'
    no-tabs 2
    # lsp-enable-window
    # lsp-auto-signature-help-enable
    # Currently elixir-ls shows errors on half the screen when in mix.exs.
    # lsp-auto-hover-disable
}
hook global WinSetOption filetype=erlang %{
    no-tabs 4
}
hook global WinSetOption .*\.heex %{
    no-tabs 2
}
hook global BufCreate .*\.rkt %{ set-option buffer filetype racket }
hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
    # parinfer-enable-window -smart
    no-tabs 2
    set-option window disabled_hooks '' # reenable trim-indent hooks
    set-option window auto_pairs ( ) { } [ ] '"' '"' “ ” ‘ ’ « » ‹ › # exclude ` and '
    set-option window comment_line ';;'
}
hook global WinSetOption filetype=racket %{
    lsp-enable-window
    set buffer lsp_completion_trigger %{ fail }
    map window insert <c-a-y> 'λ'

    # Copy some options from scheme.kak
    require-module scheme
    set-option window static_words %opt{scheme_static_words}
    set-option buffer extra_word_chars '!' '$' '%' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '_' '~'
    hook window ModeChange pop:insert:.* -group scheme-trim-indent  lisp-trim-indent
    hook window InsertChar \n -group scheme-indent lisp-indent-on-new-line
    hook -once -always window WinSetOption filetype=.* %{ remove-hooks window scheme-.+ }
}
hook -group racket-highlight global WinSetOption filetype=racket %{
    add-highlighter window/scheme ref scheme
    hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/scheme }
}

declare-option -docstring "rails command" \
    str railscmd "PARALLEL_WORKERS=12 spring rails"
declare-option -docstring "rails command arguments" \
    str railsargs ""
define-command -params .. \
    -docstring %{
        rails [<arguments>]: rails command wrapper
        All the optional arguments are forwarded to the rails command
     } rails %{ evaluate-commands %sh{
    output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-make.XXXXXXXX)/fifo
    mkfifo ${output}
    ( eval "${kak_opt_railscmd}" "${kak_opt_railsargs}" "$@" > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
    printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
              edit! -fifo ${output} -scroll *rails*
              set-option buffer filetype grep
              hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
          }"
}}
hook global WinSetOption filetype=ruby %{
    set-option window lintcmd 'run() { cat "$1" | /usr/local/bin/rubocop -s "$kak_buffile" 2>/dev/null; } && run '
    set-option window formatcmd 'rubocop --stdin . -a'
    no-tabs 2
    lint-on-write

    map global build t -docstring 'run test at point' \
        ': write<ret>: rails test %sh{ echo "$kak_buffile":"$kak_cursor_line" }<ret>'
    map global build T -docstring 'run tests in the current file' \
        ': write<ret>: rails test %val{buffile}<ret>'
}
hook global WinSetOption filetype=slim %{
    set-option window lintcmd 'run () { cat "$1" | /home/grfork/.rbenv/shims/slim-lint --reporter emacs --stdin-file-path "$kak_buffile" 2>/dev/null; } && run '
    no-tabs 2
    set-option window comment_line '//'
    lint-on-write
}
hook global WinSetOption filetype=zig %{
    add-highlighter -override window/column_highlighter column 100 default,rgb:303030
    set-option window formatcmd 'zig fmt --stdin'
    hook window BufWritePre .* format
    no-tabs 4
    lsp-enable-window
    lsp-auto-signature-help-enable

    # lsp semantic tokens
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}

hook global WinSetOption filetype=(c|cpp) %{
    noexpandtab
    lsp-enable-window
    lsp-auto-signature-help-enable
    lsp-auto-hover-disable

    # lsp semantic tokens
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}

declare-option -docstring "shell command run to build the project" \
    str odincmd odin
declare-option -docstring "shell command run to build the project" \
    str odinargs "-error-pos-style:unix"
define-command -params .. \
    -docstring %{
        odin [<arguments>]: odin compiler wrapper
        All the optional arguments are forwarded to the odin compiler
     } odin %{ evaluate-commands %sh{
    output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-make.XXXXXXXX)/fifo
    mkfifo ${output}
    ( eval "${kak_opt_odincmd}" "$@" "${kak_opt_odinargs}" > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
    printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
              edit! -fifo ${output} -scroll *odin*
              set-option buffer filetype grep
              hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
          }"
}}

hook global WinSetOption filetype=(odin) %{
    noexpandtab
    lsp-enable-window
    lsp-auto-signature-help-enable
    lsp-auto-hover-disable

    # set-option window formatcmd 'odinfmt -stdin --'
    # hook window BufWritePre .* format

    # HACK: odinfmt currently leaves two newlines at the end
    add-highlighter -override window/trailing_space regex '(\h+$|\n\n\n+\z)' 0:default,red

    map global build r -docstring 'save and build' \
        ': write<ret>: odin build %sh{ echo $(dirname "$kak_buffile") }<ret>'
    map global build f -docstring 'save and run' \
        ': write<ret>: odin run %sh{ echo $(dirname "$kak_buffile") } %sh{ echo -out:"${TMPDIR:-/tmp}"/kak-odin-run }<ret>'
    map global build f -docstring 'save and run a file' \
        ': write<ret>: odin run %val{buffile} -file %sh{ echo -out:"${TMPDIR:-/tmp}"/kak-odin-file-run }<ret>'
}

declare-option -docstring "shell command run to build the project" \
    str rakucmd raku
declare-option -docstring "shell command run to build the project" \
    str rakuargs ""
define-command -params .. \
    -docstring %{
        raku [<arguments>]: raku compiler wrapper
        All the optional arguments are forwarded to the raku compiler
     } raku %{ evaluate-commands %sh{
    output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-make.XXXXXXXX)/fifo
    mkfifo ${output}
    ( eval "${kak_opt_rakucmd}" "${kak_opt_rakuargs}" "$@" > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
    printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
              edit! -fifo ${output} -scroll *raku*
              set-option buffer filetype grep
              hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
          }"
}}
hook global WinSetOption filetype=raku %{
    no-tabs 4

    map global build r -docstring 'save and run' \
        ': write<ret>: raku %val{buffile}<ret>'
}

hook global WinSetOption filetype=nim %{
    set-option buffer formatcmd "nimprettify"
    set-option buffer makecmd 'nimble build'
    no-tabs 2
    # lsp-engage # add `args` to toml config and set as path to nim sources
    lsp-enable-window
}
hook global WinSetOption filetype=go %{
    noexpandtab
    lsp-engage
    hook window BufWritePost .* %{ go-format -use-goimports }
}
# eslint should be installed as a local packages via npm or yarn
hook global WinSetOption filetype=(html|javascript) %{
  evaluate-commands %sh{
    exec 2>/dev/null # silence STDERR
    eslintrc_path=$(ls -1 .eslintrc* || (grep -q 'eslintConfig' package.json && echo 'package.json'))
    if [ -n "$eslintrc_path" ]; then
      if [ -x ./node_modules/.bin/eslint ]; then
        eslint_path='./node_modules/.bin/eslint'
      elif command -v eslint > /dev/null 2>&1; then
        eslint_path='eslint'
      else
        echo "echo -debug 'No eslint available'"
        exit 1
      fi
      echo "set-option buffer lintcmd '"$eslint_path" --config "$eslintrc_path" --format ~/.config/kak/eslint-formatter-kakoune.js --stdin-filename "$kak_buffile" --stdin <'"
      echo "set-option buffer formatcmd '"$eslint_path" --config "$eslintrc_path" --fix "$kak_buffile"'"
      echo 'lint-on-write'
    fi
  }
}
hook global WinSetOption filetype=dart %{
    no-tabs 2
}
hook global WinSetOption filetype=elvish %{
    no-tabs 2
    lsp-engage
}
hook global WinSetOption filetype=janet %{
    set-option window formatcmd 'janet-format'
    hook window BufWritePre .* format
    no-tabs 2
}



# Git
#####

# Disable for scratch buffers ending with *
hook global WinCreate .*(?<!\*)$ %{ evaluate-commands %sh{
    if git rev-parse --is-inside-work-tree &> /dev/null; then
        echo "
            git show-diff
            hook global BufWritePost %val{buffile} %{git update-diff}
            hook global BufReload %val{buffile} %{git update-diff}
            hook global WinDisplay %val{buffile} %{git update-diff}
        "
    fi
} }

define-command git-copy-current-line-url \
    -docstring 'Get a url with the current line in the web interface of source version control' %{
    nop %sh{
        ORIGIN=$(git remote get-url --push origin)
        COMMIT_HASH=$(git rev-parse HEAD)
        case "$ORIGIN" in
            git@github.com:*)
                ORIGIN2=${ORIGIN%.git}
                ORIGIN3=${ORIGIN2##git@github.com:}
                URL="https://github.com/${ORIGIN3}/blob/${COMMIT_HASH}/${kak_bufname}#L${kak_cursor_line}"
                printf "$URL" | xclip -in -selection clipboard >/dev/null 2>&1 &
            ;;
        esac
    }
}



# ctags
#######

define-command gen-ctags %{
    echo %sh{git ls-files | xargs ctags 2>/dev/null &}
}

# Readline key bindings
map global insert <c-d> <del>
map global insert <c-f> <right> -docstring forward-char
map global insert <c-b> <left> -docstring backward-char
map global insert <c-y> '<c-r>"' -docstring yank
map global prompt <c-y> '<c-r>"' -docstring yank
map global prompt <c-g> <esc> -docstring abort

# Misc
######

define-command doc-key %{
    # Read a single key.
    evaluate-commands -verbatim on-key %{
        # Switch to the documentation of keys, or open it.
        try %{
            buffer *doc-keys*
        } catch %{
            doc keys
        }
        # Jump to the line where this key is documented.
        evaluate-commands execute-keys %sh{
            kakquote() { printf "%s" "$*" | sed "s/'/''/g; 1s/^/'/; \$s/\$/'/"; }
            key=$(printf %s "$kak_key" |
            sed '
                s/<semicolon>/;/;
                s/-semicolon/-;/;
                s/</<lt>/;
            ')
            kakquote "$(printf "/^\Q%s<ret>vv" "$key")"
        }
    }
} -docstring "show the documentation of a key in normal mode"

map global normal f '<a-:>F'
map global normal F '<a-:><a-;><a-F>'
map global normal t '<a-:>t'
map global normal T '<a-:><a-;><a-T>'
map global normal x ': select-or-extend-lines<ret>'
map global normal X 'x<a-:><a-;>'
map global normal { '<a-:><a-;>{p'
map global normal } '<a-:>}p'
map global goto s i

define-command select-or-extend-lines %{
  try %{
    # At least one selection is not full, so select whole lines.
    execute-keys -draft '<a-K>\A^.*\n\z<ret>'
    execute-keys 'x'
  } catch %{
    execute-keys 'Jx'
  }
}

# Load local project config
try %{ source '.local.kak' }
